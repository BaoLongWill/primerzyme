# -*- coding: utf-8 -*-
"""im coi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eRtd6vYEODMCsfAtpNjXQf8KPep1AwMG
"""

# Hàm tính GC content
def calculate_gc_content(sequence):
    g_count = sequence.count('G')
    c_count = sequence.count('C')
    total_length = len(sequence)
    gc_content = ((g_count + c_count) / total_length) * 100
    return gc_content

# Hàm tính Tm (nhiệt độ nóng chảy)
def calculate_tm(sequence):
    a_count = sequence.count('A')
    t_count = sequence.count('T')
    g_count = sequence.count('G')
    c_count = sequence.count('C')
    tm = 2 * (a_count + t_count) + 4 * (g_count + c_count)
    return tm

# Hàm kiểm tra tính hợp lệ của DNA
def is_valid_dna(sequence):
    return all(base in "ATGC" for base in sequence.upper())

# Hàm tìm reverse complement (đảo ngược và bổ sung)
def reverse_complement(sequence):
    complement = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
    return ''.join(complement[base] for base in sequence[::-1])

# Hàm tạo primer
def generate_primers(dna_sequence):
    primers = []
    for i in range(18, 26):  # Độ dài primer từ 18-25 base
        forward_primer = dna_sequence[:i]
        reverse_primer = reverse_complement(dna_sequence[-i:])
        forward_tm = calculate_tm(forward_primer)
        reverse_tm = calculate_tm(reverse_primer)
        forward_gc = calculate_gc_content(forward_primer)
        reverse_gc = calculate_gc_content(reverse_primer)

        # Kiểm tra GC content và Tm
        if 40 <= forward_gc <= 60 and 40 <= reverse_gc <= 60:
            if abs(forward_tm - reverse_tm) <= 2:  # Tm chênh lệch không quá 2°C
                primers.append({
                    "Forward Primer": forward_primer,
                    "Reverse Primer": reverse_primer,
                    "Forward Tm": forward_tm,
                    "Reverse Tm": reverse_tm,
                    "Forward GC%": forward_gc,
                    "Reverse GC%": reverse_gc
                })
    return primers

# Chương trình chính
dna_sequence = input("Nhập chuỗi DNA: ").upper()
if is_valid_dna(dna_sequence):
    primers = generate_primers(dna_sequence)
    if primers:
        for idx, primer in enumerate(primers):
            print(f"Primer Set {idx + 1}:")
            print(f"  Forward Primer: {primer['Forward Primer']} (Tm: {primer['Forward Tm']}°C, GC%: {primer['Forward GC%']}%)")
            print(f"  Reverse Primer: {primer['Reverse Primer']} (Tm: {primer['Reverse Tm']}°C, GC%: {primer['Reverse GC%']}%)")
            print("-" * 50)
    else:
        print("Không tìm thấy primer phù hợp!")
else:
    print("Chuỗi DNA không hợp lệ!")

# Danh sách các enzyme và recognition sites
restriction_enzymes = {
    "EcoRI": "GAATTC",
    "BamHI": "GGATCC",
    "HindIII": "AAGCTT",
    "NotI": "GCGGCCGC",
    "XhoI": "CTCGAG",
    "PstI": "CTGCAG",
    "SmaI": "CCCGGG",
    "ApaI": "GGGCCC",
    "KpnI": "GGTACC",
    "NcoI": "CCATGG",
    "SalI": "GTCGAC",
    "SacI": "GAGCTC",
    "ClaI": "ATCGAT",
    "XbaI": "TCTAGA"
}

# Hàm tìm các restriction sites
def find_restriction_sites(dna_sequence):
    sites = {}
    for enzyme, site in restriction_enzymes.items():
        positions = []
        start = 0
        while True:
            start = dna_sequence.find(site, start)
            if start == -1:
                break
            positions.append(start + 1)  # Vị trí 1-based
            start += 1
        if positions:
            sites[enzyme] = positions
    return sites

# Chương trình chính
dna_sequence = input("Nhập chuỗi DNA: ").upper()
if is_valid_dna(dna_sequence):
    restriction_sites = find_restriction_sites(dna_sequence)
    if restriction_sites:
        print("Các enzyme cắt và vị trí tương ứng:")
        for enzyme, positions in restriction_sites.items():
            print(f"  {enzyme}: {', '.join(map(str, positions))}")
    else:
        print("Không tìm thấy vị trí cắt nào!")
else:
    print("Chuỗi DNA không hợp lệ!")